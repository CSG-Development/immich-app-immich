plugins {
  id "com.android.application"
  id "kotlin-android"
  id "dev.flutter.flutter-gradle-plugin"
  id 'com.google.devtools.ksp'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
  localPropertiesFile.withInputStream { localProperties.load(it) }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
  flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
  flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
  keystorePropertiesFile.withInputStream { keystoreProperties.load(it) }
}

android {
  compileSdkVersion 35
  ndkVersion = "28.1.13356709"

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
    coreLibraryDesugaringEnabled true
  }

  kotlinOptions {
    jvmTarget = '17'
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
  }

    defaultConfig {
        applicationId "com.seagate.curator.stxphotos.android"
        minSdkVersion 26
        targetSdkVersion 35
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
            debugSymbolLevel = "FULL"
        }
    }

   signingConfigs {
        debug { // this section is incomplete
            def keyAliasVal = System.getenv("ALIAS")
            def keyPasswordVal = System.getenv("ANDROID_KEY_PASSWORD")
            def storePasswordVal = System.getenv("ANDROID_STORE_PASSWORD")

            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file("../key.jks") ? file("../key.jks") : file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
        release_dev {
            if (keystoreProperties['MYAPP_UPLOAD_STORE_FILE_DEV']) {
                storeFile file(keystoreProperties['MYAPP_UPLOAD_STORE_FILE_DEV'])
                storePassword keystoreProperties['MYAPP_UPLOAD_STORE_PASSWORD_DEV']
                keyAlias keystoreProperties['MYAPP_UPLOAD_KEY_ALIAS_DEV']
                keyPassword keystoreProperties['MYAPP_UPLOAD_KEY_PASSWORD_DEV']
            }
        }
        release_prod {
            if (keystoreProperties['MYAPP_UPLOAD_STORE_FILE_PROD']) {
                storeFile file(keystoreProperties['MYAPP_UPLOAD_STORE_FILE_PROD'])
                storePassword keystoreProperties['MYAPP_UPLOAD_STORE_PASSWORD_PROD']
                keyAlias keystoreProperties['MYAPP_UPLOAD_KEY_ALIAS_PROD']
                keyPassword keystoreProperties['MYAPP_UPLOAD_KEY_PASSWORD_PROD']
            }
        }
   }

    namespace 'com.seagate.curator.stxphotos.android'

    splits {
        abi {
            enable true
            reset()
            // https://docs.flutter.dev/deployment/android#what-are-the-supported-target-architectures
            include("armeabi-v7a", "arm64-v8a", "x86_64")
            universalApk true // generate an additional APK that contains all the ABIs
        }
    }

    flavorDimensions "environment"
    productFlavors {
        dev {
            dimension "environment"
            applicationIdSuffix ".dev"
            resValue "string", "app_name", "Curator Photos(Dev)"
            buildTypes {
                debug {
                    applicationIdSuffix '.debug'
                    versionNameSuffix '-DEBUG'
                    signingConfig signingConfigs.debug
                }

                release {
                    shrinkResources true
                    signingConfig signingConfigs.release_dev
                    ndk {
                        abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
                    }
                }
            }
        }
        prod {
            dimension "environment"
            resValue "string", "app_name", "Curator Photos"
            buildTypes {
                debug {
                    applicationIdSuffix '.debug'
                    versionNameSuffix '-DEBUG'
                    signingConfig signingConfigs.debug
                }

                release {
                    shrinkResources true
                    signingConfig signingConfigs.release_prod
                    ndk {
                        abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
                    }
                }
            }
        }
    }
}

flutter {
  source '../..'
}

dependencies {
  def kotlin_version = '2.0.20'
  def kotlin_coroutines_version = '1.9.0'
  def work_version = '2.9.1'
  def concurrent_version = '1.2.0'
  def guava_version = '33.3.1-android'
  def glide_version = '4.16.0'
  def serialization_version = '1.8.1'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    implementation "androidx.concurrent:concurrent-futures:$concurrent_version"
    implementation "com.google.guava:guava:$guava_version"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    ksp "com.github.bumptech.glide:ksp:$glide_version"
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.2'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version"

    implementation files('../libs/telemetry-client-release-1.1.53.aar')
    //Dependencies needed by the Telemetry SDK
    implementation 'com.fasterxml.jackson.core:jackson-core:2.5.3'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.5.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.5.3'
    implementation 'com.squareup.okhttp3:okhttp:3.8.0'
}

// This is uncommented in F-Droid build script
//f configurations.all {
//f     exclude group: 'com.google.android.gms'
//f }
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'