// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class ClipboardPigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "ClipboardPigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func clipboardWrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func clipboardWrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func clipboardIsNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func clipboardNilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsClipboardMessages(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = clipboardNilOrValue(lhs) as Any?
  let cleanRhs = clipboardNilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsClipboardMessages(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsClipboardMessages(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashClipboardMessages(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashClipboardMessages(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashClipboardMessages(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

/// Represents a photo file that can be copied to clipboard
///
/// Generated class from Pigeon that represents data sent in messages.
struct ClipboardPhoto: Hashable {
  var filePath: String
  var fileName: String
  var fileSize: Int64
  var mimeType: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ClipboardPhoto? {
    let filePath = pigeonVar_list[0] as! String
    let fileName = pigeonVar_list[1] as! String
    let fileSize = pigeonVar_list[2] as! Int64
    let mimeType = pigeonVar_list[3] as! String

    return ClipboardPhoto(
      filePath: filePath,
      fileName: fileName,
      fileSize: fileSize,
      mimeType: mimeType
    )
  }
  func toList() -> [Any?] {
    return [
      filePath,
      fileName,
      fileSize,
      mimeType,
    ]
  }
  static func == (lhs: ClipboardPhoto, rhs: ClipboardPhoto) -> Bool {
    return deepEqualsClipboardMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashClipboardMessages(value: toList(), hasher: &hasher)
  }
}

/// Result of clipboard operations
///
/// Generated class from Pigeon that represents data sent in messages.
struct ClipboardResult: Hashable {
  var success: Bool
  var error: String? = nil
  var photoCount: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ClipboardResult? {
    let success = pigeonVar_list[0] as! Bool
    let error: String? = clipboardNilOrValue(pigeonVar_list[1])
    let photoCount = pigeonVar_list[2] as! Int64

    return ClipboardResult(
      success: success,
      error: error,
      photoCount: photoCount
    )
  }
  func toList() -> [Any?] {
    return [
      success,
      error,
      photoCount,
    ]
  }
  static func == (lhs: ClipboardResult, rhs: ClipboardResult) -> Bool {
    return deepEqualsClipboardMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashClipboardMessages(value: toList(), hasher: &hasher)
  }
}

private class ClipboardMessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return ClipboardPhoto.fromList(self.readValue() as! [Any?])
    case 130:
      return ClipboardResult.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class ClipboardMessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ClipboardPhoto {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? ClipboardResult {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ClipboardMessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ClipboardMessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ClipboardMessagesPigeonCodecWriter(data: data)
  }
}

class ClipboardMessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = ClipboardMessagesPigeonCodec(readerWriter: ClipboardMessagesPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NativeClipboardApi {
  /// Copy photos to the system clipboard
  /// Returns success status and any error message
  func copyPhotosToClipboard(filePaths: [String]) throws -> ClipboardResult
  /// Get photos from the system clipboard
  /// Returns list of photo file paths if available
  func getPhotosFromClipboard() throws -> [String]
  /// Check if there are photos in the clipboard
  /// Returns true if photos are available
  func hasPhotosInClipboard() throws -> Bool
  /// Get clipboard photo metadata
  /// Returns list of photo information if available
  func getClipboardPhotoMetadata() throws -> [ClipboardPhoto]
  /// Clear the system clipboard
  /// Returns true if clipboard was cleared successfully
  func clearClipboard() throws -> Bool
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NativeClipboardApiSetup {
  static var codec: FlutterStandardMessageCodec { ClipboardMessagesPigeonCodec.shared }
  /// Sets up an instance of `NativeClipboardApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NativeClipboardApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// Copy photos to the system clipboard
    /// Returns success status and any error message
    let copyPhotosToClipboardChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.curator_photos_clipboard.NativeClipboardApi.copyPhotosToClipboard\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      copyPhotosToClipboardChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filePathsArg = args[0] as! [String]
        do {
          let result = try api.copyPhotosToClipboard(filePaths: filePathsArg)
          reply(clipboardWrapResult(result))
        } catch {
          reply(clipboardWrapError(error))
        }
      }
    } else {
      copyPhotosToClipboardChannel.setMessageHandler(nil)
    }
    /// Get photos from the system clipboard
    /// Returns list of photo file paths if available
    let getPhotosFromClipboardChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.curator_photos_clipboard.NativeClipboardApi.getPhotosFromClipboard\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getPhotosFromClipboardChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getPhotosFromClipboard()
          reply(clipboardWrapResult(result))
        } catch {
          reply(clipboardWrapError(error))
        }
      }
    } else {
      getPhotosFromClipboardChannel.setMessageHandler(nil)
    }
    /// Check if there are photos in the clipboard
    /// Returns true if photos are available
    let hasPhotosInClipboardChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.curator_photos_clipboard.NativeClipboardApi.hasPhotosInClipboard\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      hasPhotosInClipboardChannel.setMessageHandler { _, reply in
        do {
          let result = try api.hasPhotosInClipboard()
          reply(clipboardWrapResult(result))
        } catch {
          reply(clipboardWrapError(error))
        }
      }
    } else {
      hasPhotosInClipboardChannel.setMessageHandler(nil)
    }
    /// Get clipboard photo metadata
    /// Returns list of photo information if available
    let getClipboardPhotoMetadataChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.curator_photos_clipboard.NativeClipboardApi.getClipboardPhotoMetadata\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getClipboardPhotoMetadataChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getClipboardPhotoMetadata()
          reply(clipboardWrapResult(result))
        } catch {
          reply(clipboardWrapError(error))
        }
      }
    } else {
      getClipboardPhotoMetadataChannel.setMessageHandler(nil)
    }
    /// Clear the system clipboard
    /// Returns true if clipboard was cleared successfully
    let clearClipboardChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.curator_photos_clipboard.NativeClipboardApi.clearClipboard\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      clearClipboardChannel.setMessageHandler { _, reply in
        do {
          let result = try api.clearClipboard()
          reply(clipboardWrapResult(result))
        } catch {
          reply(clipboardWrapError(error))
        }
      }
    } else {
      clearClipboardChannel.setMessageHandler(nil)
    }
  }
}
