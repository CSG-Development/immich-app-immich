# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

APP_NAME = "Curator Photos"
TEAM_ID = "57HJ3KH2XC"
SECURITY_GROUP_ID = "group.com.seagate.curator"
BUNDLE_ID_PROD = "com.seagate.curator.stxphotos.ios"
BUNDLE_ID_DEV = "com.seagate.curator.stxphotos.ios.dev"
SHARE_EXTENSION_SUFFIX = "ShareExtension"


lane :build_prod_appstore do |options|
    local_create_app_exact(
      bundle_identifier: BUNDLE_ID_PROD,
      team_id: TEAM_ID,
      security_group: SECURITY_GROUP_ID,
      export_method: "app-store",
      options: options
    )
end

lane :build_prod_adhoc do |options|
    local_create_app_exact(
      bundle_identifier: BUNDLE_ID_PROD,
      team_id: TEAM_ID,
      security_group: SECURITY_GROUP_ID,
      export_method: "ad-hoc",
      options: options
    )
end

lane :build_dev_appstore do |options|
    local_create_app_exact(
      bundle_identifier: BUNDLE_ID_DEV,
      team_id: TEAM_ID,
      security_group: SECURITY_GROUP_ID,
      export_method: "app-store",
      options: options
    )
end

lane :build_dev_adhoc do |options|
    local_create_app_exact(
      bundle_identifier: BUNDLE_ID_DEV,
      team_id: TEAM_ID,
      security_group: SECURITY_GROUP_ID,
      export_method: "ad-hoc",
      options: options
    )
end

def local_create_app_exact(bundle_identifier:, team_id:, security_group:, export_method:, options:) 
    local_create_app(
      export_method: export_method,
      team_id: team_id,
      bundle_identifier: bundle_identifier,
      security_group: security_group,
      options: options,
    )
end

def local_create_app(
  export_method:, 
  team_id:,
  bundle_identifier:,
  security_group:,
  options:
  )
    import_from_git(
        url: "git@gitlab.noveogroup.com:iOSTeam/fastlane-common.git",
        path: "build-ios-app",
    )

    schemeName = ENV["API_environment_key"] ? "#{ENV["API_environment_key"]}" : "Runner"

    app_definition = AppDefinition.new(
        lane: self,
        workspace_name: "Runner",
        project_name: "Runner",
        scheme: schemeName,
        export_method: export_method,
		    xcargs: "-allowProvisioningUpdates",
        team_id: team_id,
        ota_upload: "no-ota-upload",
        insert_build_number: true,
        include_bitcode: false,
    )

    app_definition.add_target(
        target_name: "Runner",
        bundle_identifier: bundle_identifier,
    )
# add more targets if present
    app_definition.add_target(
        target_name: "ShareExtension",
        bundle_identifier: "#{bundle_identifier}.#{SHARE_EXTENSION_SUFFIX}",
    )

# If several targets are present, usually app group or shared keychain are required to be updated too.
    update_plist(
      plist_path: "Runner/Runner.entitlements",
      block: lambda { |plist|
        plist["com.apple.security.application-groups"] = [security_group]
      }
    )
    update_plist(
      plist_path: "ShareExtension/ShareExtension.entitlements",
      block: lambda { |plist|
        plist["com.apple.security.application-groups"] = [security_group]
      }
    )

    app_definition.update_codesigning_and_build()
end

########################
# Uploading to Appstore
########################

def upload_ipa(ipa_path, apple_id)
    upload_to_testflight(
        ipa: ipa_path,
        skip_submission: true,
        skip_waiting_for_build_processing: ENV["should_skip_processing"] || true,
        apple_id: apple_id,
    )
end

lane :upload_build do |options|
    ipa_path=options[:ipa_path]
    apple_id=options[:apple_id]
    upload_ipa(ipa_path, apple_id)
end

#######################
# Creation of provisioning profiles in Seagate Apple Development portal
# Set environment variables AppStoreConnect_KeyID, appStoreConnect_IssuerID
# Run GenerateProvisioningProfiles
#######################

def create_profile(
    is_app:,
    is_prod:,
    adhoc:,
)
  app_id = is_prod ? BUNDLE_ID_PROD : BUNDLE_ID_DEV
  app_id = is_app ? app_id : "#{app_id}.#{SHARE_EXTENSION_SUFFIX}"
  provisioning_name = "#{APP_NAME} :: #{is_app ? "App" : "ShareExtension"} :: #{is_prod ? "Prod" : "Dev"} :: #{adhoc ? "AdHoc" : "AppStore"} -- Bundle ID: #{app_id}"
  UI.message("Creating profile: #{provisioning_name}")
  sigh(
    username: ENV["FASTLANE_USER"],
    password: ENV["FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"],
    adhoc: adhoc,
    force: true,
    app_identifier: app_id,
    provisioning_name: provisioning_name,
    output_path: "./",
    cert_id: ENV["AppStoreConnect_CertID"]
  )
end

def create_profiles(
  is_prod:,
)
  create_profile(is_app: true,  is_prod: is_prod, adhoc: true)
  create_profile(is_app: false, is_prod: is_prod, adhoc: true)
  create_profile(is_app: true,  is_prod: is_prod, adhoc: false)
  create_profile(is_app: false, is_prod: is_prod, adhoc: false)
end

lane :GenerateProvisioningProfiles do
  UI.user_error!("Error: Missing AppStoreConnect_CertID") unless ENV["AppStoreConnect_CertID"]
  UI.user_error!("Error: Missing FASTLANE_USER") unless ENV["FASTLANE_USER"]
  UI.user_error!("Error: Missing FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD") unless ENV["FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"]

  create_profiles(is_prod: true)
  create_profiles(is_prod: false)
end
